package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strings"
)

// import u001 from '!!raw-loader!../../../../../public/img/icons/unicons/angle-double-down.svg';

// cacheItem(u001, unicons, 'angle-double-down');

func main() {
	file, err := os.Open("cmd/genbundle/bundle.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	count := 1000

	fmt.Printf(`// This file was autogenerated for icons

import { cacheStore } from 'react-inlinesvg';

export let cacheInitialized = false;
export let iconRoot = 'public/img/icons';

function cacheItem(content: string, path: string) {
	cacheStore[iconRoot + path] = { content, status: 'loaded', queue: [] };
}

`)

	var items []string

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line == "" || strings.HasPrefix(line, "#") {
			continue
		}
		count++

		if !strings.HasSuffix(line, ".svg") {
			line += ".svg"
		}

		fmt.Printf("import u%d from '!!raw-loader!../../../../../public/img/icons/%s';\n", count, line)
		items = append(items, fmt.Sprintf("  cacheItem(u%d, '%s');", count, line))
	}
	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}

	fmt.Printf(`
export function initIconCache() {
	cacheInitialized = true;

	// This function needs to be called after index.js loads to give the
	// application time to modify __webpack_public_path__ with a CDN path
	const publicPath = (window as any).__carbon_public_path__;
	if (publicPath) {
	iconRoot = publicPath + 'img/icons/';
	}	
`)

	for _, item := range items {
		fmt.Printf("%s\n", item)
	}

	fmt.Printf("}\n")
}
